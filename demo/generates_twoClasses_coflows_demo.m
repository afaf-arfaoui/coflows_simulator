
% Using the generator to randomly generates a batch of coflows that can be
% discribed in two different classes: light coflows that have only a single
% flow, and heavy coflows that have many flows. Distribution between the two
% classes is managed by a super parameter. 
% First example relies on parameters given by the user through a prompt
% Second example shows how to set parameters in the script
% 
%% Example One

fprintf('============= EXAMPLE ONE: using a prommt =======================\n\n');

architecture_type = 'twoTypeCoflows_architectureVol'; % which type of batch to create
% Possible architecture types:
%   - 'twoTypeCoflows_architectureVol' batch containing 2 classes of
%   coflows
%   - 'csv_architecture'     % coflows from CVS file
%   - 'skeleton_architecture' % empty coflow
%   - 'mapRed_architecture' % batch with coflows following the architecture
%   of flows generated by MapReduce jobs


% Set parameters of the generation algorithm through a prompt:
architecture_config_1 = simulation_config.load_params(architecture_type);

% Creating instance:
architecture_config_1 = utils.main_generator(architecture_config_1);
% The coflow related objects are :
% - architecture_config_1.fabric: a Fabric object representing the network,
% based on the BigSwitch model
% - architecture_config_1.coflows: an array of Coflow object representing the
% coflows

% Some display of the coflows generated in this instance:
fprintf('Coflows generating in example 1: \n');
utils.displayCoflows(architecture_config_1.coflows);

%% Example Two

fprintf('============= EXAMPLE TWO: setting parameters =======================\n\n');

% Setting parameters:
architecture_config_2.architecture_type = 'twoTypeCoflows_architectureVol';
architecture_config_2.minNumMachines = 3; % # minimum number of machines in the fabric (each machine will have 2 ports ingress/egress)
architecture_config_2.maxNumMachines = 5; % # maximum number of machines in the fabric (each machine will have 2 ports ingress/egress)

architecture_config_2.minNumCoflows = 3; % minimum number of coflows
architecture_config_2.maxNumCoflows = 7; % maximum number of coflows
architecture_config_2.typeCoflowProba = [0.7 0.3]; % probability vector related to the 2 classes of coflows

% Class 1: coflows with one flow
% Class 2: coflows with multiple flows

architecture_config_2.avgFlowVolume = 1; % average size of flow
architecture_config_2.standardDivVolume = 0.1; % standard deviation (since flows' volumes will be 
                                              % generated according to normal distribution)
architecture_config_2.linkCapacitiesAvailable = [1 1 1]; % possible link capacities (should not exceed 1x3 vector)
architecture_config_2.ratioClass = 0.8; % ratio volume between class 1 and class 2

% Creating instance:
architecture_config_2 = utils.main_generator(architecture_config_2);

% Some display of the coflows generated in this second example:
fprintf('Coflows generating in example 2: \n');
utils.displayCoflows(architecture_config_2.coflows);
