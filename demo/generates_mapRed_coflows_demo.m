% Generates a batch of coflows that follow the structure of data transfers 
% in a Map Reduce cluster:
% - There are a random number of coflows set between a min and max value
% given as an input parameter
% - Each coflow has:
%   * a random number of mappers randommly located in the fabric. The
%   number of mappers is set between a min and max value given as an input
%   parameter
%   * a random number of reducers randomly located in the fabric. The
%   number of reducers is set between a min and max value given as an input
%   parameter
%   * the number of flows is then the number of mappers time the number of reducers
%   minus the flows that have same source and destination
% - All generated flows have a volume generated by an 
%   exponential law with a given common average value
%
% First example relies on parameters given by the user through a prompt
% Second example shows how to set parameters in the script
% 
%% Example One

fprintf('============= EXAMPLE ONE: using a prommt =======================\n\n');

architecture_type = 'mapRed_architecture'; % which type of batch to create
% Possible architecture types:
%   - 'twoTypeCoflows_architectureVol' batch containing 2 classes of
%   coflows
%   - 'csv_architecture'     % coflows from CVS file
%   - 'mapRed_architecture' % batch with coflows following the architecture
%   of flows generated by MapReduce jobs


% Set parameters of the generation algorithm through a prompt:
architecture_config_1 = simulation_config.load_params(architecture_type);

% Creating instance:
architecture_config_1 = utils.main_generator(architecture_config_1);
% The coflow related objects are :
% - architecture_config_1.fabric: a Fabric object representing the network,
% based on the BigSwitch model
% - architecture_config_1.coflows: an array of Coflow object representing the
% coflows

% Some display of the coflows generated in this instance:
fprintf('Coflows generating in example 1: \n');
utils.displayCoflows(architecture_config_1.coflows);

%% Example Two

fprintf('============= EXAMPLE TWO: setting parameters =======================\n\n');

% Setting parameters:
architecture_config_2.architecture_type = 'mapRed_architecture';

% # of machines in the fabric (each machine will have 2 ports ingress/egress)
architecture_config_2.NumMachines = 5;

% minimum number of coflows
architecture_config_2.minNumCoflows = 4;

% maximum number of coflows
architecture_config_2.maxNumCoflows = 8;

% vec of min max # of Mappers
architecture_config_2.minMaxMap = [3 5];

% vec of min max # of Reducers
architecture_config_2.minMaxRed = [2 3];

% average volume of flows
architecture_config_2.avgFlowVolume = 2;

% possible link capacities (should not exceed 1x3 vector)
architecture_config_2.linkCapacitiesAvailable = [1 1 1];

% Creating instance:
architecture_config_2 = utils.main_generator(architecture_config_2);

% Some display of the coflows generated in this second example:
fprintf('Coflows generating in example 2: \n');
utils.displayCoflows(architecture_config_2.coflows);